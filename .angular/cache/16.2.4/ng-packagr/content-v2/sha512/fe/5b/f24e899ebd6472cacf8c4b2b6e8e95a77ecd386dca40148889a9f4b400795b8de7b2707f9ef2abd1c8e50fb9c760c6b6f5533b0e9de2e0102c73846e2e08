{"hash":"2309354fc211fdb11ba534718f13f558d5ed3d2f","fesm2022":[{"exports":["firstRouteCompleted","goToUrl","ofRoute","onLeaveRoute","provideNgrxRouterState","routeChange","routeLeave","selectCurrentUrl","selectRouterActiveRoutes","selectRouterParams"],"facadeModuleId":"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\ngrx-router-store.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.actions.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.effects.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.reducer.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router-collect.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\ngrx-router.connector.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\ngrx-router.providers.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\ngrx-router.operators.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.selectors.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\index.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\public_api.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\index.mjs","C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\ngrx-router-store.mjs"],"name":"ngrx-router-store","type":"chunk","dynamicImports":[],"fileName":"ngrx-router-store.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["inject","*","Injectable","makeEnvironmentProviders","ENVIRONMENT_INITIALIZER"],"@ngrx/effects":["Actions","createEffect","ofType","provideEffects"],"@ngrx/store":["createAction","props","createReducer","on","Store","provideState","createFeatureSelector","createSelector"],"@angular/router":["Router","GuardsCheckStart","ActivationStart","GuardsCheckEnd","ActivationEnd"],"rxjs/operators":["tap","filter"]},"imports":["@angular/core","@ngrx/effects","@ngrx/store","@angular/router","rxjs/operators"],"modules":{"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.actions.mjs":{"code":"const goToUrl = createAction('[Router] Go To Url', props());\nconst routeChange = createAction('[Router] Route Change', props());\nconst routeLeave = createAction('[Router] Route Leave', props());\nconst firstRouteCompleted = createAction('[Router] First Route Completed');","originalLength":1864,"removedExports":[],"renderedExports":["goToUrl","routeChange","routeLeave","firstRouteCompleted"],"renderedLength":270},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.effects.mjs":{"code":"class RouterEffects {\n    constructor() {\n        this.#actions$ = inject(Actions);\n        this.#router = inject(Router);\n        this.navigateToUrl$ = createEffect(() => this.#actions$.pipe(ofType(goToUrl), tap(action => {\n            void this.#router.navigateByUrl(action.url, {\n                skipLocationChange: action.skipLocationChange,\n            });\n        })), { dispatch: false });\n    }\n    #actions$;\n    #router;\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: RouterEffects, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: RouterEffects }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: RouterEffects, decorators: [{\n            type: Injectable\n        }] });","originalLength":3476,"removedExports":[],"renderedExports":["RouterEffects"],"renderedLength":948},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.reducer.mjs":{"code":"const NGRX_ROUTER_FEATURE_KEY = 'router';\nconst initialState = {\n    url: '',\n    routes: [],\n    params: {},\n};\nconst ngrxRouterReducer = createReducer(initialState, on(routeChange, (_, { url, routes, params }) => ({ url, routes, params })));","originalLength":2190,"removedExports":[],"renderedExports":["NGRX_ROUTER_FEATURE_KEY","initialState","ngrxRouterReducer"],"renderedLength":243},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router-collect.mjs":{"code":"function getRoutePath(route) {\n    const path = !route.routeConfig || !route.routeConfig.path || route.routeConfig.path.length === 0\n        ? ''\n        : '/' + route.routeConfig.path;\n    return (route.parent === null ? '' : getRoutePath(route.parent)) + path;\n}\nfunction getRouteParams(route, params) {\n    return typeof route === 'undefined' || route === null || route.children === null\n        ? params\n        : getRouteParams(route.children[0], Object.assign(params, route.params));\n}\nfunction getRoutePathFromRoot(route) {\n    const noChildren = route.children === null || route.children.length === 0;\n    const path = !route.routeConfig || !route.routeConfig.path || route.routeConfig.path.length === 0\n        ? ''\n        : '/' + route.routeConfig.path;\n    return noChildren ? path : path + getRoutePathFromRoot(route.children[0]);\n}","originalLength":4041,"removedExports":[],"renderedExports":["getRoutePath","getRouteParams","getRoutePathFromRoot"],"renderedLength":845},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\ngrx-router.connector.mjs":{"code":"class NgrxRouterConnector {\n    static { this.firstActivationInProgress = true; }\n    #router = inject(Router);\n    #store = inject(Store);\n    #routes = [];\n    #params = {};\n    constructor() {\n        this.#attachToRouterEvents();\n    }\n    #attachToRouterEvents() {\n        this.#router.events.subscribe((event) => {\n            if (event instanceof GuardsCheckStart) {\n                this.#routes = [];\n                this.#params = getRouteParams(event.state.root, {});\n            }\n            else if (event instanceof ActivationStart) {\n                const route = getRoutePath(event.snapshot);\n                if (route !== '' && !this.#routes.includes(route)) {\n                    this.#routes.push(route);\n                }\n            }\n            else if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n                const currentUrl = this.#router.url;\n                const url = event.urlAfterRedirects;\n                if (currentUrl !== url && currentUrl !== '/') {\n                    const root = this.#router.routerState.root;\n                    const currentRoute = getRoutePathFromRoot(root);\n                    this.#store.dispatch(routeLeave({ url: currentUrl, route: currentRoute }));\n                }\n                this.#store.dispatch(routeChange({ url, routes: this.#routes, params: this.#params }));\n            }\n            else if (event instanceof ActivationEnd) {\n                if (NgrxRouterConnector.firstActivationInProgress) {\n                    NgrxRouterConnector.firstActivationInProgress = false;\n                    this.#store.dispatch(firstRouteCompleted());\n                }\n            }\n        });\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: NgrxRouterConnector, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: NgrxRouterConnector }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: NgrxRouterConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });","originalLength":8099,"removedExports":[],"renderedExports":["NgrxRouterConnector"],"renderedLength":2264},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\ngrx-router.providers.mjs":{"code":"const provideNgrxRouterState = (configs) => {\n    return makeEnvironmentProviders([\n        NgrxRouterConnector,\n        provideState(NGRX_ROUTER_FEATURE_KEY, ngrxRouterReducer),\n        provideEffects([RouterEffects]),\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            multi: true,\n            useFactory: () => () => inject(NgrxRouterConnector),\n        },\n    ]);\n};","originalLength":3034,"removedExports":[],"renderedExports":["provideNgrxRouterState"],"renderedLength":387},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\ngrx-router.operators.mjs":{"code":"function ofRoute(route, except) {\n    return filter((action) => {\n        if (action.type === routeChange.type) {\n            const routeAction = action;\n            if (typeof except !== 'undefined' &&\n                except !== null &&\n                except.length > 0 &&\n                compareRoutes(except, routeAction.routes)) {\n                return false;\n            }\n            return compareRoutes(route, routeAction.routes);\n        }\n        return false;\n    });\n}\nfunction onLeaveRoute(routes) {\n    return filter((action) => {\n        if (action.type === routeLeave.type) {\n            const routeAction = action;\n            return routes.includes(routeAction.route);\n        }\n        return false;\n    });\n}\nfunction compareRoutes(route, paths) {\n    if (Array.isArray(route) && Array.isArray(paths)) {\n        return paths.findIndex(it => route.includes(it)) > -1;\n    }\n    else if (!Array.isArray(route) && Array.isArray(paths)) {\n        return paths.includes(route);\n    }\n    else if (Array.isArray(route) && !Array.isArray(paths)) {\n        return route.includes(paths);\n    }\n    return route === paths;\n}","originalLength":5670,"removedExports":[],"renderedExports":["ofRoute","onLeaveRoute"],"renderedLength":1136},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\state\\ngrx-router.selectors.mjs":{"code":"const selectNgrxRouterState = createFeatureSelector(NGRX_ROUTER_FEATURE_KEY);\nconst selectCurrentUrl = createSelector(selectNgrxRouterState, state => state.url);\nconst selectRouterActiveRoutes = createSelector(selectNgrxRouterState, state => state.routes);\nconst selectRouterParams = createSelector(selectNgrxRouterState, state => state.params);","originalLength":2313,"removedExports":[],"renderedExports":["selectCurrentUrl","selectRouterActiveRoutes","selectRouterParams"],"renderedLength":345},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\src\\index.mjs":{"code":"","originalLength":1056,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\public_api.mjs":{"code":"","originalLength":359,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\index.mjs":{"code":"","originalLength":348,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\Projects\\github\\ngrx-router-store\\dist\\ngrx-router-store\\esm2022\\ngrx-router-store.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":503,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { inject, Injectable, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER } from '@angular/core';\nimport { Actions, createEffect, ofType, provideEffects } from '@ngrx/effects';\nimport { createAction, props, createReducer, on, Store, provideState, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { Router, GuardsCheckStart, ActivationStart, GuardsCheckEnd, ActivationEnd } from '@angular/router';\nimport { tap, filter } from 'rxjs/operators';\n\nconst goToUrl = createAction('[Router] Go To Url', props());\nconst routeChange = createAction('[Router] Route Change', props());\nconst routeLeave = createAction('[Router] Route Leave', props());\nconst firstRouteCompleted = createAction('[Router] First Route Completed');\n\nclass RouterEffects {\n    constructor() {\n        this.#actions$ = inject(Actions);\n        this.#router = inject(Router);\n        this.navigateToUrl$ = createEffect(() => this.#actions$.pipe(ofType(goToUrl), tap(action => {\n            void this.#router.navigateByUrl(action.url, {\n                skipLocationChange: action.skipLocationChange,\n            });\n        })), { dispatch: false });\n    }\n    #actions$;\n    #router;\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: RouterEffects, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: RouterEffects }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: RouterEffects, decorators: [{\n            type: Injectable\n        }] });\n\nconst NGRX_ROUTER_FEATURE_KEY = 'router';\nconst initialState = {\n    url: '',\n    routes: [],\n    params: {},\n};\nconst ngrxRouterReducer = createReducer(initialState, on(routeChange, (_, { url, routes, params }) => ({ url, routes, params })));\n\nfunction getRoutePath(route) {\n    const path = !route.routeConfig || !route.routeConfig.path || route.routeConfig.path.length === 0\n        ? ''\n        : '/' + route.routeConfig.path;\n    return (route.parent === null ? '' : getRoutePath(route.parent)) + path;\n}\nfunction getRouteParams(route, params) {\n    return typeof route === 'undefined' || route === null || route.children === null\n        ? params\n        : getRouteParams(route.children[0], Object.assign(params, route.params));\n}\nfunction getRoutePathFromRoot(route) {\n    const noChildren = route.children === null || route.children.length === 0;\n    const path = !route.routeConfig || !route.routeConfig.path || route.routeConfig.path.length === 0\n        ? ''\n        : '/' + route.routeConfig.path;\n    return noChildren ? path : path + getRoutePathFromRoot(route.children[0]);\n}\n\nclass NgrxRouterConnector {\n    static { this.firstActivationInProgress = true; }\n    #router = inject(Router);\n    #store = inject(Store);\n    #routes = [];\n    #params = {};\n    constructor() {\n        this.#attachToRouterEvents();\n    }\n    #attachToRouterEvents() {\n        this.#router.events.subscribe((event) => {\n            if (event instanceof GuardsCheckStart) {\n                this.#routes = [];\n                this.#params = getRouteParams(event.state.root, {});\n            }\n            else if (event instanceof ActivationStart) {\n                const route = getRoutePath(event.snapshot);\n                if (route !== '' && !this.#routes.includes(route)) {\n                    this.#routes.push(route);\n                }\n            }\n            else if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n                const currentUrl = this.#router.url;\n                const url = event.urlAfterRedirects;\n                if (currentUrl !== url && currentUrl !== '/') {\n                    const root = this.#router.routerState.root;\n                    const currentRoute = getRoutePathFromRoot(root);\n                    this.#store.dispatch(routeLeave({ url: currentUrl, route: currentRoute }));\n                }\n                this.#store.dispatch(routeChange({ url, routes: this.#routes, params: this.#params }));\n            }\n            else if (event instanceof ActivationEnd) {\n                if (NgrxRouterConnector.firstActivationInProgress) {\n                    NgrxRouterConnector.firstActivationInProgress = false;\n                    this.#store.dispatch(firstRouteCompleted());\n                }\n            }\n        });\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: NgrxRouterConnector, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: NgrxRouterConnector }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.7\", ngImport: i0, type: NgrxRouterConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nconst provideNgrxRouterState = (configs) => {\n    return makeEnvironmentProviders([\n        NgrxRouterConnector,\n        provideState(NGRX_ROUTER_FEATURE_KEY, ngrxRouterReducer),\n        provideEffects([RouterEffects]),\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            multi: true,\n            useFactory: () => () => inject(NgrxRouterConnector),\n        },\n    ]);\n};\n\nfunction ofRoute(route, except) {\n    return filter((action) => {\n        if (action.type === routeChange.type) {\n            const routeAction = action;\n            if (typeof except !== 'undefined' &&\n                except !== null &&\n                except.length > 0 &&\n                compareRoutes(except, routeAction.routes)) {\n                return false;\n            }\n            return compareRoutes(route, routeAction.routes);\n        }\n        return false;\n    });\n}\nfunction onLeaveRoute(routes) {\n    return filter((action) => {\n        if (action.type === routeLeave.type) {\n            const routeAction = action;\n            return routes.includes(routeAction.route);\n        }\n        return false;\n    });\n}\nfunction compareRoutes(route, paths) {\n    if (Array.isArray(route) && Array.isArray(paths)) {\n        return paths.findIndex(it => route.includes(it)) > -1;\n    }\n    else if (!Array.isArray(route) && Array.isArray(paths)) {\n        return paths.includes(route);\n    }\n    else if (Array.isArray(route) && !Array.isArray(paths)) {\n        return route.includes(paths);\n    }\n    return route === paths;\n}\n\nconst selectNgrxRouterState = createFeatureSelector(NGRX_ROUTER_FEATURE_KEY);\nconst selectCurrentUrl = createSelector(selectNgrxRouterState, state => state.url);\nconst selectRouterActiveRoutes = createSelector(selectNgrxRouterState, state => state.routes);\nconst selectRouterParams = createSelector(selectNgrxRouterState, state => state.params);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { firstRouteCompleted, goToUrl, ofRoute, onLeaveRoute, provideNgrxRouterState, routeChange, routeLeave, selectCurrentUrl, selectRouterActiveRoutes, selectRouterParams };\n//# sourceMappingURL=ngrx-router-store.mjs.map\n","map":null,"preliminaryFileName":"ngrx-router-store.mjs","sourcemapFileName":"ngrx-router-store.mjs.map"},{"fileName":"ngrx-router-store.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ngrx-router-store.mjs\",\"sources\":[\"../../../modules/ngrx-router-store/src/state/ngrx-router.actions.ts\",\"../../../modules/ngrx-router-store/src/state/ngrx-router.effects.ts\",\"../../../modules/ngrx-router-store/src/state/ngrx-router.reducer.ts\",\"../../../modules/ngrx-router-store/src/state/ngrx-router-collect.ts\",\"../../../modules/ngrx-router-store/src/ngrx-router.connector.ts\",\"../../../modules/ngrx-router-store/src/ngrx-router.providers.ts\",\"../../../modules/ngrx-router-store/src/ngrx-router.operators.ts\",\"../../../modules/ngrx-router-store/src/state/ngrx-router.selectors.ts\",\"../../../modules/ngrx-router-store/ngrx-router-store.ts\"],\"sourcesContent\":[\"import { Params } from '@angular/router';\\nimport { createAction, props } from '@ngrx/store';\\n\\nexport const goToUrl = createAction(\\n  '[Router] Go To Url',\\n  props<{ url: string; skipLocationChange?: boolean }>()\\n);\\n\\nexport const routeChange = createAction(\\n  '[Router] Route Change',\\n  props<{ url: string; routes: string[]; params: Params }>()\\n);\\n\\nexport const routeLeave = createAction(\\n  '[Router] Route Leave',\\n  props<{ url: string; route: string }>()\\n);\\n\\nexport const firstRouteCompleted = createAction('[Router] First Route Completed');\\n\",\"import { inject, Injectable } from '@angular/core';\\nimport { Router } from '@angular/router';\\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\\n\\nimport { tap } from 'rxjs/operators';\\n\\nimport * as actions from './ngrx-router.actions';\\n\\n@Injectable()\\nexport class RouterEffects {\\n  readonly #actions$ = inject(Actions);\\n  readonly #router = inject(Router);\\n\\n  navigateToUrl$ = createEffect(\\n    () =>\\n      this.#actions$.pipe(\\n        ofType(actions.goToUrl),\\n        tap(action => {\\n          void this.#router.navigateByUrl(action.url, {\\n            skipLocationChange: action.skipLocationChange,\\n          });\\n        })\\n      ),\\n    { dispatch: false }\\n  );\\n}\\n\",\"import { createReducer, on } from '@ngrx/store';\\n\\nimport * as actions from './ngrx-router.actions';\\nimport { Params } from '@angular/router';\\n\\nexport const NGRX_ROUTER_FEATURE_KEY = 'router';\\n\\nexport interface NgrxRouterState {\\n  url: string;\\n  routes: string[];\\n  params: Params;\\n}\\n\\nexport interface NgrxRouterPartialState {\\n  readonly [NGRX_ROUTER_FEATURE_KEY]: NgrxRouterState;\\n}\\n\\nexport const initialState: NgrxRouterState = {\\n  url: '',\\n  routes: [],\\n  params: {},\\n};\\n\\nexport const ngrxRouterReducer = createReducer(\\n  initialState,\\n  on(\\n    actions.routeChange,\\n    (_, { url, routes, params }): NgrxRouterState => ({ url, routes, params })\\n  )\\n);\\n\",\"import { ActivatedRoute, ActivatedRouteSnapshot, Params } from '@angular/router';\\n\\nexport function getRoutePath(route: ActivatedRouteSnapshot): string {\\n  const path =\\n    !route.routeConfig || !route.routeConfig.path || route.routeConfig.path.length === 0\\n      ? ''\\n      : '/' + route.routeConfig.path;\\n  return (route.parent === null ? '' : getRoutePath(route.parent)) + path;\\n}\\n\\nexport function getRouteParams(route: ActivatedRouteSnapshot, params: Params): Params {\\n  return typeof route === 'undefined' || route === null || route.children === null\\n    ? params\\n    : getRouteParams(route.children[0], Object.assign(params, route.params));\\n}\\n\\nexport function getRoutePathFromRoot(route: ActivatedRoute): string {\\n  const noChildren = route.children === null || route.children.length === 0;\\n  const path =\\n    !route.routeConfig || !route.routeConfig.path || route.routeConfig.path.length === 0\\n      ? ''\\n      : '/' + route.routeConfig.path;\\n  return noChildren ? path : path + getRoutePathFromRoot(route.children[0]);\\n}\\n\",\"import { inject, Injectable } from '@angular/core';\\nimport {\\n  ActivationEnd,\\n  ActivationStart,\\n  Event,\\n  GuardsCheckEnd,\\n  GuardsCheckStart,\\n  Params,\\n  Router,\\n} from '@angular/router';\\nimport { Store } from '@ngrx/store';\\n\\nimport { getRouteParams, getRoutePath, getRoutePathFromRoot } from './state/ngrx-router-collect';\\nimport * as actions from './state/ngrx-router.actions';\\n\\n@Injectable()\\nexport class NgrxRouterConnector {\\n  static firstActivationInProgress = true;\\n\\n  readonly #router = inject(Router);\\n  readonly #store = inject(Store);\\n\\n  #routes: string[] = [];\\n  #params: Params = {};\\n\\n  constructor() {\\n    this.#attachToRouterEvents();\\n  }\\n\\n  #attachToRouterEvents() {\\n    this.#router.events.subscribe((event: Event) => {\\n      if (event instanceof GuardsCheckStart) {\\n        this.#routes = [];\\n        this.#params = getRouteParams(event.state.root, {});\\n      } else if (event instanceof ActivationStart) {\\n        const route = getRoutePath(event.snapshot);\\n        if (route !== '' && !this.#routes.includes(route)) {\\n          this.#routes.push(route);\\n        }\\n      } else if (event instanceof GuardsCheckEnd && event.shouldActivate) {\\n        const currentUrl = this.#router.url;\\n        const url = event.urlAfterRedirects;\\n        if (currentUrl !== url && currentUrl !== '/') {\\n          const root = this.#router.routerState.root;\\n          const currentRoute = getRoutePathFromRoot(root);\\n          this.#store.dispatch(actions.routeLeave({ url: currentUrl, route: currentRoute }));\\n        }\\n\\n        this.#store.dispatch(\\n          actions.routeChange({ url, routes: this.#routes, params: this.#params })\\n        );\\n      } else if (event instanceof ActivationEnd) {\\n        if (NgrxRouterConnector.firstActivationInProgress) {\\n          NgrxRouterConnector.firstActivationInProgress = false;\\n          this.#store.dispatch(actions.firstRouteCompleted());\\n        }\\n      }\\n    });\\n  }\\n}\\n\",\"import { ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders } from '@angular/core';\\nimport { provideEffects } from '@ngrx/effects';\\nimport { provideState } from '@ngrx/store';\\n\\nimport { RouterEffects } from './state/ngrx-router.effects';\\nimport { NGRX_ROUTER_FEATURE_KEY, ngrxRouterReducer } from './state/ngrx-router.reducer';\\nimport { NgrxRouterConnector } from './ngrx-router.connector';\\n\\nexport const provideNgrxRouterState = <T extends number>(configs?: {\\n  routePermissions?: Record<string, T | null>;\\n}) => {\\n  return makeEnvironmentProviders([\\n    NgrxRouterConnector,\\n    provideState(NGRX_ROUTER_FEATURE_KEY, ngrxRouterReducer),\\n    provideEffects([RouterEffects]),\\n    {\\n      provide: ENVIRONMENT_INITIALIZER,\\n      multi: true,\\n      useFactory: () => () => inject(NgrxRouterConnector),\\n    },\\n  ]);\\n};\\n\",\"import { Action } from '@ngrx/store';\\n\\nimport { OperatorFunction } from 'rxjs';\\nimport { filter } from 'rxjs/operators';\\n\\nimport * as actions from './state/ngrx-router.actions';\\n\\ntype RouteChange = ReturnType<typeof actions.routeChange>;\\nexport function ofRoute(\\n  route: string | string[],\\n  except?: string | string[]\\n): OperatorFunction<Action, RouteChange> {\\n  return filter<Action, RouteChange>((action: Action): action is RouteChange => {\\n    if (action.type === actions.routeChange.type) {\\n      const routeAction = action as RouteChange;\\n      if (\\n        typeof except !== 'undefined' &&\\n        except !== null &&\\n        except.length > 0 &&\\n        compareRoutes(except, routeAction.routes)\\n      ) {\\n        return false;\\n      }\\n\\n      return compareRoutes(route, routeAction.routes);\\n    }\\n\\n    return false;\\n  });\\n}\\n\\ntype RouteLeave = ReturnType<typeof actions.routeLeave>;\\nexport function onLeaveRoute(routes: string[]): OperatorFunction<Action, RouteLeave> {\\n  return filter<Action, RouteLeave>((action: Action): action is RouteLeave => {\\n    if (action.type === actions.routeLeave.type) {\\n      const routeAction = action as RouteLeave;\\n      return routes.includes(routeAction.route);\\n    }\\n\\n    return false;\\n  });\\n}\\n\\nfunction compareRoutes(route: string | string[], paths: string | string[]): boolean {\\n  if (Array.isArray(route) && Array.isArray(paths)) {\\n    return paths.findIndex(it => route.includes(it)) > -1;\\n  } else if (!Array.isArray(route) && Array.isArray(paths)) {\\n    return paths.includes(route);\\n  } else if (Array.isArray(route) && !Array.isArray(paths)) {\\n    return route.includes(paths);\\n  }\\n\\n  return route === paths;\\n}\\n\",\"import { createFeatureSelector, createSelector } from '@ngrx/store';\\n\\nimport { NGRX_ROUTER_FEATURE_KEY, NgrxRouterState } from './ngrx-router.reducer';\\n\\nconst selectNgrxRouterState = createFeatureSelector<NgrxRouterState>(NGRX_ROUTER_FEATURE_KEY);\\nconst selectCurrentUrl = createSelector(selectNgrxRouterState, state => state.url);\\nconst selectRouterActiveRoutes = createSelector(selectNgrxRouterState, state => state.routes);\\nconst selectRouterParams = createSelector(selectNgrxRouterState, state => state.params);\\n\\nexport { selectCurrentUrl, selectRouterActiveRoutes, selectRouterParams };\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './index';\\n\"],\"names\":[\"actions.goToUrl\",\"actions.routeChange\",\"actions.routeLeave\",\"actions.firstRouteCompleted\"],\"mappings\":\"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\"}","type":"asset"}]}